#!/usr/bin/env python3

import sys
from src.lexer import Lexer
from src.parser import Parser
from src.interpreter import Interpreter


class Orchestrator:
    def execute(self, code):
        lexer = Lexer(code)
        lexer.process_source_code()
        tokens = lexer.get_tokens()

        parser = Parser(tokens)
        statements = parser.parse()
        if parser.error_handler.has_errors():
            parser.error_handler.log_errors()
            return

        interpreter = Interpreter()
        interpreter.interpret(statements)
        if interpreter.error_handler.has_errors():
            interpreter.error_handler.log_errors()

    def interpret_file(self, filename):
        pass

    def run_repl(self):
        while True:
            try:
                sys.stdout.write('$ ')
                line = input()
                if line is None:
                    break
                self.execute(line)
            except (EOFError, KeyboardInterrupt):
                break

        print()


if __name__ == '__main__':
    if len(sys.argv) > 2:
        sys.stderr.write('Usage: ' + sys.argv[0] + ' [filename]\n')
        sys.exit(1)

    orchestrator = Orchestrator()

    if len(sys.argv) == 2:
        orchestrator.interpret_file(sys.argv[1])
    else:
        orchestrator.run_repl()

    sys.exit(0)
